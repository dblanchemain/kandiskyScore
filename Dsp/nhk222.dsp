declare name        "nhk222";
declare version     "1.0";
declare author      "D.Blanchemain";
declare license     "BSD";
declare copyright   "(c)D.Blanchemain 2023";
import("stdfaust.lib");
Matrix(N,M) =_<: par(out, M, *(Fader(1,out): si.smoo)) :> par(out, M, _)
with {
tabSpeakerX(0)=-1;
tabSpeakerY(0)=0;
tabSpeakerZ(0)=1;
tabSpeakerD(0)=1.41;
tabSpeakerX(1)=1;
tabSpeakerY(1)=0;
tabSpeakerZ(1)=1;
tabSpeakerD(1)=1.41;
tabSpeakerX(2)=0;
tabSpeakerY(2)=0;
tabSpeakerZ(2)=1;
tabSpeakerD(2)=1.00;
tabSpeakerX(3)=-1;
tabSpeakerY(3)=-0.6;
tabSpeakerZ(3)=-1;
tabSpeakerD(3)=1.54;
tabSpeakerX(4)=1;
tabSpeakerY(4)=-0.6;
tabSpeakerZ(4)=-1;
tabSpeakerD(4)=1.54;
tabSpeakerX(5)=-0.5;
tabSpeakerY(5)=0;
tabSpeakerZ(5)=0.99;
tabSpeakerD(5)=1.11;
tabSpeakerX(6)=0.5;
tabSpeakerY(6)=0;
tabSpeakerZ(6)=1;
tabSpeakerD(6)=1.12;
tabSpeakerX(7)=0;
tabSpeakerY(7)=-1;
tabSpeakerZ(7)=-0.6;
tabSpeakerD(7)=1.17;
tabSpeakerX(8)=-1;
tabSpeakerY(8)=-0.6;
tabSpeakerZ(8)=0;
tabSpeakerD(8)=1.17;
tabSpeakerX(9)=1;
tabSpeakerY(9)=-0.6;
tabSpeakerZ(9)=0;
tabSpeakerD(9)=1.17;
tabSpeakerX(10)=-1;
tabSpeakerY(10)=0.9;
tabSpeakerZ(10)=1;
tabSpeakerD(10)=1.68;
tabSpeakerX(11)=1;
tabSpeakerY(11)=0.9;
tabSpeakerZ(11)=1;
tabSpeakerD(11)=1.68;
tabSpeakerX(12)=0;
tabSpeakerY(12)=0.9;
tabSpeakerZ(12)=1;
tabSpeakerD(12)=1.35;
tabSpeakerX(13)=0;
tabSpeakerY(13)=0.9;
tabSpeakerZ(13)=0;
tabSpeakerD(13)=0.90;
tabSpeakerX(14)=-1;
tabSpeakerY(14)=0.9;
tabSpeakerZ(14)=-1;
tabSpeakerD(14)=1.68;
tabSpeakerX(15)=1;
tabSpeakerY(15)=0.9;
tabSpeakerZ(15)=-1;
tabSpeakerD(15)=1.68;
tabSpeakerX(16)=-1;
tabSpeakerY(16)=0.9;
tabSpeakerZ(16)=0;
tabSpeakerD(16)=1.35;
tabSpeakerX(17)=1;
tabSpeakerY(17)=0.9;
tabSpeakerZ(17)=0;
tabSpeakerD(17)=1.35;
tabSpeakerX(18)=0;
tabSpeakerY(18)=0.9;
tabSpeakerZ(18)=-1;
tabSpeakerD(18)=1.35;
tabSpeakerX(19)=0;
tabSpeakerY(19)=-1;
tabSpeakerZ(19)=1;
tabSpeakerD(19)=1.41;
tabSpeakerX(20)=-0.64;
tabSpeakerY(20)=-1;
tabSpeakerZ(20)=1;
tabSpeakerD(20)=1.55;
tabSpeakerX(21)=0.64;
tabSpeakerY(21)=-1;
tabSpeakerZ(21)=1;
tabSpeakerD(21)=1.55;
dtencGen(in, out) = sqrt(pow(tabSpeakerX(out)-x(in),2) + pow(tabSpeakerY(out)+y(in),2) + pow(tabSpeakerZ(out)-z(in),2));
hspot = hslider("Hot Spot",-20,-50,0,1);
dgain(in, out) = ba.db2linear((hspot/tabSpeakerD(out))*dtencGen(in,out));
x(i) = hslider("/X%i",0,-1,1,0.01);
y(i) = hslider("/Y%i",0,-1,1,0.01);
z(i) = hslider("/Z%i",0,-1,1,0.01);
Fader(in,out)= vgroup("[1]Input %2in",dgain(in,out)*cdistance);
cdistance(in)=hslider("dt",1,0,1,0.1):si.smoo;
paramDistance(x)=hgroup("[2]Distance",x);
};
process =_,_:> Matrix(1,22);
