declare name        "auro101";
declare version     "1.0";
declare author      "D.Blanchemain";
declare license     "BSD";
declare copyright   "(c)D.Blanchemain 2023";
import("stdfaust.lib");
Matrix(N,M) =_<: par(out, M, *(Fader(1,out): si.smoo)) :> par(out, M, _)
with {
tabSpeakerX(0)=-0.5;
tabSpeakerY(0)=0;
tabSpeakerZ(0)=1;
tabSpeakerD(0)=1.12;
tabSpeakerX(1)=0;
tabSpeakerY(1)=0;
tabSpeakerZ(1)=1;
tabSpeakerD(1)=1.00;
tabSpeakerX(2)=0.5;
tabSpeakerY(2)=0;
tabSpeakerZ(2)=1;
tabSpeakerD(2)=1.12;
tabSpeakerX(3)=-1;
tabSpeakerY(3)=0;
tabSpeakerZ(3)=-1;
tabSpeakerD(3)=1.41;
tabSpeakerX(4)=1;
tabSpeakerY(4)=0;
tabSpeakerZ(4)=-1;
tabSpeakerD(4)=1.41;
tabSpeakerX(5)=-1;
tabSpeakerY(5)=0.8;
tabSpeakerZ(5)=-1;
tabSpeakerD(5)=1.62;
tabSpeakerX(6)=-1;
tabSpeakerY(6)=0.8;
tabSpeakerZ(6)=1;
tabSpeakerD(6)=1.62;
tabSpeakerX(7)=1;
tabSpeakerY(7)=0.8;
tabSpeakerZ(7)=1;
tabSpeakerD(7)=1.62;
tabSpeakerX(8)=1;
tabSpeakerY(8)=0.8;
tabSpeakerZ(8)=-1;
tabSpeakerD(8)=1.62;
tabSpeakerX(9)=0;
tabSpeakerY(9)=1;
tabSpeakerZ(9)=0;
tabSpeakerD(9)=1.00;
dtencGen(in, out) = sqrt(pow(tabSpeakerX(out)-x(in),2) + pow(tabSpeakerY(out)+y(in),2) + pow(tabSpeakerZ(out)-z(in),2));
hspot = hslider("Hot Spot",-20,-50,0,1);
dgain(in, out) = ba.db2linear((hspot/tabSpeakerD(out))*dtencGen(in,out));
x(i) = hslider("/X%i",0,-1,1,0.01);
y(i) = hslider("/Y%i",0,-1,1,0.01);
z(i) = hslider("/Z%i",0,-1,1,0.01);
Fader(in,out)= vgroup("[1]Input %2in",dgain(in,out)*cdistance);
cdistance(in)=hslider("dt",1,0,1,0.1):si.smoo;
paramDistance(x)=hgroup("[2]Distance",x);
};
process =_,_:> Matrix(1,10);
